= P U R E - A R C H =

This document describes the process of installing = P U R E - A R C H =.
It uses the Arch provided 'archinstaller' utility, that comes with the ISO, but unlike most standard installations it focusses on creating a repeatable system.

* Linux commands to check system

#+begin_src shell
  iwctl station wlan0 connect "mywifi" # connect to wireless connection
  ping 1.1.1.1                         # test internet connection
  cat /proc/cpuinfo                    # lists cpu details (to understand whitch micopackage to install)
  #+end_src

* Disk Layout
Note that at the moment installation fails on 'grub'. An automatic BTRFS works, the manual one fails.
- Manual disk partitioning
- Create Boot Partition:
   + Start 1MiB
   + End 512MiB
   + FAT32
   + Mount Point: /boot
   + Mark as bootable (automatically done, but verify)
- Create Root Partition:
   + Start 513MiB
   + End 100%
   + BTRFS
   + Desired Sub Partitions:
      - @ subvolume (root)
         + Mount: /
         + Compressed
      - @home subvolume (home)
         + Mount: /home
         + Compressed
      - @var_log subvolume
         + Mount: /var/log
         + Compressed
      - @snapshots subvolume
         + Mount: /.snapshots
         + Compressed
      - @images subvolume (KVM Virtual machine images copy/write)
         + Mount: /var/lib/libvirt/images
         + Compressed
         + Nodatacow
    
* Archinstall Options
- Desktop:
   + kde
- Additional packages:
   + intel-ucode (amd-ucode)
   + foot (terminal)
   + firefox
   + firewald
   + git
   + inotify-tools (boot from btrfs snapshots)
   + gnome-keyring
   + vim
   + noto-fonts
   + reflector
   + tlp (power management)
- Network
   + networkmanager
- Optional packages:
   + multilib
- Save Configuration
   + Save User Configuration
      - Directory: /mnt/archinstall/(home, var, usr, log)
      - Directory: /home

* After install chroot into the installation
Do not leave the installation and reboot, as the btrfs subvolumes compression  needs to be adjusted.
Chroot into the installation:
#+begin_src shell
  vim /etc/fstab
  .. for all subvolumes /, /.snapshots, /home, /var_log. All but /boot
  .. rw.noatime, compress=zstd    # remove rw.relatime, space_chache=v2, subvolid=xx
  # manually compress all subvolumes
  btrfs filesystem defragment -r -v -cstdz /
#+end_src

Enable services:
#+begin_src shell
  sudo systemctl enable avahi-daemon  # enable network discovery
  sudo systemctl enable bluetooth     # enable bluetooth
  sudo systemctl enable cups          # enable printing
  sudo systemctl enable firewalld     # enable firewall security
  sudo systemctl enable flp           # enable power management
  sudo systemctl mask systemd-rfkill.socket  # hide systemd
  sudo systemctl mask systemd-rfkill.service # hide systemd
  sudo systemctl enable upower
#+end_src

Configure package sources:
#+begin_src shell
  vim /etc/xdg/reflector/reflector.conf
  .. change country / save
  sudo systemctl enable reflector.timer
#+end_src

All done - reboot

* Install AUR support

** Install AUR pacman helper paru (lengthy as it installs rust)
#+begin_src shell
  git clone https://aur.archlinux.org/paru.git
  cd paru
  makepkg -si PKGBUILD
  cd ..
  rm -rf paru
#+end_src

** Install AUR pacmane helper yay (faster)
#+begin_src shell
  git clone https://aur.archlinux.org/yay-bin
  cd yay-bin
  makepkg -si
  cd ..
  rm -rf yay-bin
#+end_src

* Install 'snapper' btrfs snaphot manager

Snapper monitors and auto creates snaphots.
For instance at every installation of a package (pacman) it creates a pre- and post- snapshot.

#+begin_src
  yay -S snapper-support    # pulls in all snapper dependencies
#+end_src

During installation the creation of the config fails (check) as it was created earlier.
To rectify this:

#+begin_src shell
  sudo umount /.snapshots/                  # unmount snapshots
  sudo rm -r /.snapshots/                   # remove the folder
  sudo snapper -c root create-config /      # create the snapper config 
  sudo btrfs subvolume list /               # check that the additional subvolume was created
  sudo btrfs subvolume delete /.snapshots   # delete the extra snapshot subvolume
  sudo mkdir /.snapshots                    # recreate the mount point for snapshots
  sudo mount -av                            # mount all again
  sudo snapper ls                           # shows existing snapshots
  sudo grub-mkconfig -o /boot/grub/grub.cfg # create grub snaphots
  sudo systemctl enable --now grub-btrfsd   # enable to notify deamon 
  sudo systemctl status grub-btrfsd         # check if the deamon is runnning
  # install a package to trigger the deamon
  sudo snapper ls                           # shows existing snapshots
#+end_src

* Configure 'cryptsetup'
By default arch does not enable discards, so trims on the SSD will fail.
The following enables discards:

#+begin_src shell
  sudo cryptsetup status cryptlvm                    # check status of the crypt volume 
  suo fstrim -v /                                    # check if trimming works --> no
  sudo cryptesetup refresh --allow-discards cryptlvm # enable discards
  sudo cryptsetup status cryptlvm                    # check status of the crypt volume
  suo fstrim -v /                                    # check if trimming works -->
  sudo systemctl start fstrim.service                # start the trimming service
  sudo systemctl status fstrim.service               # check if all partitions are trimming
  sudo systenctl status frstrim.timer                # takes care if triggering the trim
#+end_src

