# pure-arch/cli.py

import typer
import os
from typing_extensions import Annotated
from pathlib import Path
from pydantic import ValidationError

# Import the specific configuration model
from .config.models import ArchInstallerConfig

# --- Configuration Constants (Assuming the PROJECT_ROOT logic is in place) ---

# Define the root of the project (assuming two levels up from cli.py)
PROJECT_ROOT = Path(__file__).resolve().parent.parent.parent
CONFIG_ENV_VAR = "MY_APP_CONFIG_PATH"
# Default path to the project-local configuration file
DEFAULT_CONFIG_PATH = PROJECT_ROOT / ".config" / "pure_arch.toml"

# --- Typer Application Instance ---

app = typer.Typer(
    help="A command-line interface for the Arch Linux installation script."
)

# --- Reusable Typer Callback for Config File ---

def validate_config_path(
    value: Path,
) -> Path:
    """
    Validates the provided configuration file path exists and is a file.
    """
    if not value.exists():
        raise typer.BadParameter(
            f"Configuration file not found at: {value.resolve()}. Please check the path."
        )
    if not value.is_file():
        raise typer.BadParameter(
            f"Path must point to a file, not a directory: {value.resolve()}"
        )
    return value

# --- Main CLI Command ---

@app.command(name="install") # Explicitly name the command
def run_installer(
    config_file: Annotated[
        Path,
        typer.Option(
            "--config", "-c",
            exists=True,
            file_okay=True,
            dir_okay=False,
            readable=True,
            resolve_path=True,
            callback=validate_config_path,
            help=f"Path to the config.toml file. Overridable via {CONFIG_ENV_VAR}.",
        ),
    ] = os.environ.get(CONFIG_ENV_VAR, DEFAULT_CONFIG_PATH),

    dry_run: Annotated[
        bool,
        typer.Option(
            "--dry-run", "-d",
            help="Run the script without making any permanent changes."
        )
    ] = False,
):
    """
    Loads configuration, validates it, and runs the Arch Linux installation script.
    """
    typer.echo(f"--- Arch Installer Startup (Dry Run: {dry_run}) ---")

    # 1. Load and Validate Configuration
    try:
        # Assuming ArchInstallerConfig has the load_config_from_file class method
        config: ArchInstallerConfig = ArchInstallerConfig.load_config_from_file(config_file)

    except ValidationError as e:
        typer.echo("üö® Configuration Validation Failed! The TOML file structure or data types are incorrect.", err=True)
        typer.echo(e.errors(), err=True) # Print detailed Pydantic errors
        raise typer.Exit(code=1)

    except ValueError as e:
        typer.echo(f"üö® Configuration Loading Error: {e}", err=True)
        raise typer.Exit(code=1)

    except Exception as e:
        typer.echo(f"üö® An unexpected error occurred during config loading: {e}", err=True)
        raise typer.Exit(code=1)

    # 2. Display the configuration and ask for confirmation

    # Display the structured summary generated by the model
    typer.echo(config.display_summary())

    # 3. ASK FOR CONSOLIDATED INSTRUCTIONS DISPLAY
    show_details = typer.confirm(
        typer.style("Would you like to review the consolidated installation instructions (packages, commands, files)?", bold=True),
        default=False
    )

    if show_details:
        # Display the full actions section using simple echo
        typer.echo(config.display_actions())

    # --- CONFIRMATION STEP ---
    if not dry_run:
        # Ask for confirmation only if NOT in dry-run mode
        typer.echo(typer.style("\n‚ö†Ô∏è WARNING: This action will partition and format disks.", fg=typer.colors.RED, bold=True))

        proceed = typer.confirm("Do you want to proceed with the installation based on the configuration above?", default=False)

        if not proceed:
            typer.echo(typer.style("Installation aborted by user.", fg=typer.colors.RED))
            raise typer.Exit()

        typer.echo(typer.style("Confirmation received. Starting full installation...", fg=typer.colors.GREEN, bold=True))
    else:
        typer.echo("--- DRY RUN MODE: Review complete. No changes will be made ---")


    # 3. Initialization and Execution

    typer.echo(f"‚úÖ Configuration loaded successfully for Host: {config.firstboot.hostname}")

    if dry_run:
        typer.echo("--- DRY RUN MODE: No changes will be made ---")
        typer.echo(f"Will attempt to partition {len(config.disk)} disk(s): {[d.path for d in config.disk]}")
        typer.echo(f"Will install {len(config.all_packages)} packages.")
    else:
        # 3. Pass the validated config object to your core application logic
        typer.echo("üöÄ Starting full installation process...")
        # Example of calling the core logic (assuming a function like 'start_installation')
        # my_app.core.installer.start_installation(config_data=config)
        pass


    typer.echo("--- Arch Installer Shutdown ---")
